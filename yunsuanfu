//前置++运算与后置++运算的区别
#include <stdio.h>
int main()
{
	int i,x,y;
	i=5;
	x=i++;		//后缀运算，先把i的值赋给x，然后i的值加1
	printf("i=%d,x=%d\n",i,x);
	i=5;
	y=++i;		//前缀运算，先使i的值加1，然后将i的值赋给y
	printf("i=%d,y=%d\n",i,y);
	return 0;
}

//运行结果：
//i=6,x=5
//i=6,y=6


//例1
#include <stdio.h>
int main()
{
	int a=3,b=5,c;
	c=(++a)*b;
	printf("a=%d,c=%d\n",a,c);
	a=3;
	c=(a++)*b;
	printf("a=%d,c=%d\n",a,c);
	return 0;
}

//运行结果：
//a=4,c=20
//a=4,c=15

//例2

#include <stdio.h>
int main()
{
	int a,b,c;
	a=6;
	b=6;
	c=6;
	a=++b-++c;
	printf("%d,%d,%d\n",a,b,c);
	a=++b+c++;
	printf("%d,%d,%d\n",a,b,c);
	a=b--+--c;
	printf("%d,%d,%d\n",a,b,c);
	return 0;
}
//运行结果：
//0,7,7
//15,8,8
//15,7,7

//  a&&b&&c,如果a为假，则不进行任何操作并结束运算，表达式的值为0，当a为真时，再向后执行后续操作，以此类推。

//  a||b||c,如果a为真，则不进行任何操作并结束运算，表达式的值为1，当a为假时，再向后执行后续操作，以此类推。

//  a&&b||c,a为真才向右执行运算，然后b为假才向右执行。
//"&&"（逻辑与） 优先级高于 "||"（逻辑或）























